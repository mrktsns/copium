{
	"compiler": {
		"version": "0.8.0+commit.c7dfd78e"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"name": "Collect",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint128",
						"name": "liquidity",
						"type": "uint128"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"name": "DecreaseLiquidity",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint128",
						"name": "liquidity",
						"type": "uint128"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"name": "IncreaseLiquidity",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "burn",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "uint128",
								"name": "amount0Max",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "amount1Max",
								"type": "uint128"
							}
						],
						"internalType": "struct INonfungiblePositionManager.CollectParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "collect",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint128",
								"name": "liquidity",
								"type": "uint128"
							},
							{
								"internalType": "uint256",
								"name": "amount0Min",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount1Min",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "deadline",
								"type": "uint256"
							}
						],
						"internalType": "struct INonfungiblePositionManager.DecreaseLiquidityParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "decreaseLiquidity",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount0Desired",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount1Desired",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount0Min",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount1Min",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "deadline",
								"type": "uint256"
							}
						],
						"internalType": "struct INonfungiblePositionManager.IncreaseLiquidityParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "increaseLiquidity",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "liquidity",
						"type": "uint128"
					},
					{
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "token0",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "token1",
								"type": "address"
							},
							{
								"internalType": "uint24",
								"name": "fee",
								"type": "uint24"
							},
							{
								"internalType": "int24",
								"name": "tickLower",
								"type": "int24"
							},
							{
								"internalType": "int24",
								"name": "tickUpper",
								"type": "int24"
							},
							{
								"internalType": "uint256",
								"name": "amount0Desired",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount1Desired",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount0Min",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "amount1Min",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "deadline",
								"type": "uint256"
							}
						],
						"internalType": "struct INonfungiblePositionManager.MintParams",
						"name": "params",
						"type": "tuple"
					}
				],
				"name": "mint",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint128",
						"name": "liquidity",
						"type": "uint128"
					},
					{
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "positions",
				"outputs": [
					{
						"internalType": "uint96",
						"name": "nonce",
						"type": "uint96"
					},
					{
						"internalType": "address",
						"name": "operator",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "token0",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "token1",
						"type": "address"
					},
					{
						"internalType": "uint24",
						"name": "fee",
						"type": "uint24"
					},
					{
						"internalType": "int24",
						"name": "tickLower",
						"type": "int24"
					},
					{
						"internalType": "int24",
						"name": "tickUpper",
						"type": "int24"
					},
					{
						"internalType": "uint128",
						"name": "liquidity",
						"type": "uint128"
					},
					{
						"internalType": "uint256",
						"name": "feeGrowthInside0LastX128",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "feeGrowthInside1LastX128",
						"type": "uint256"
					},
					{
						"internalType": "uint128",
						"name": "tokensOwed0",
						"type": "uint128"
					},
					{
						"internalType": "uint128",
						"name": "tokensOwed1",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"Collect(uint256,address,uint256,uint256)": {
					"details": "The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior",
					"params": {
						"amount0": "The amount of token0 owed to the position that was collected",
						"amount1": "The amount of token1 owed to the position that was collected",
						"recipient": "The address of the account that received the collected tokens",
						"tokenId": "The ID of the token for which underlying tokens were collected"
					}
				},
				"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
					"params": {
						"amount0": "The amount of token0 that was accounted for the decrease in liquidity",
						"amount1": "The amount of token1 that was accounted for the decrease in liquidity",
						"liquidity": "The amount by which liquidity for the NFT position was decreased",
						"tokenId": "The ID of the token for which liquidity was decreased"
					}
				},
				"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
					"details": "Also emitted when a token is minted",
					"params": {
						"amount0": "The amount of token0 that was paid for the increase in liquidity",
						"amount1": "The amount of token1 that was paid for the increase in liquidity",
						"liquidity": "The amount by which liquidity for the NFT position was increased",
						"tokenId": "The ID of the token for which liquidity was increased"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"burn(uint256)": {
					"params": {
						"tokenId": "The ID of the token that is being burned"
					}
				},
				"collect((uint256,address,uint128,uint128))": {
					"params": {
						"params": "tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect"
					},
					"returns": {
						"amount0": "The amount of fees collected in token0",
						"amount1": "The amount of fees collected in token1"
					}
				},
				"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
					"params": {
						"params": "tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change"
					},
					"returns": {
						"amount0": "The amount of token0 accounted to the position's tokens owed",
						"amount1": "The amount of token1 accounted to the position's tokens owed"
					}
				},
				"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
					"params": {
						"params": "tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change"
					},
					"returns": {
						"amount0": "The amount of token0 to acheive resulting liquidity",
						"amount1": "The amount of token1 to acheive resulting liquidity",
						"liquidity": "The new liquidity amount as a result of the increase"
					}
				},
				"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
					"details": "Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.",
					"params": {
						"params": "The params necessary to mint a position, encoded as `MintParams` in calldata"
					},
					"returns": {
						"amount0": "The amount of token0",
						"amount1": "The amount of token1",
						"liquidity": "The amount of liquidity for this position",
						"tokenId": "The ID of the token that represents the minted position"
					}
				},
				"positions(uint256)": {
					"details": "Throws if the token ID is not valid.",
					"params": {
						"tokenId": "The ID of the token that represents the position"
					},
					"returns": {
						"fee": "The fee associated with the pool",
						"feeGrowthInside0LastX128": "The fee growth of token0 as of the last action on the individual position",
						"feeGrowthInside1LastX128": "The fee growth of token1 as of the last action on the individual position",
						"liquidity": "The liquidity of the position",
						"nonce": "The nonce for permits",
						"operator": "The address that is approved for spending",
						"tickLower": "The lower end of the tick range for the position",
						"tickUpper": "The higher end of the tick range for the position",
						"token0": "The address of the token0 for a specific pool",
						"token1": "The address of the token1 for a specific pool",
						"tokensOwed0": "The uncollected amount of token0 owed to the position as of the last computation",
						"tokensOwed1": "The uncollected amount of token1 owed to the position as of the last computation"
					}
				}
			},
			"title": "Non-fungible token for positions",
			"version": 1
		},
		"userdoc": {
			"events": {
				"Collect(uint256,address,uint256,uint256)": {
					"notice": "Emitted when tokens are collected for a position NFT"
				},
				"DecreaseLiquidity(uint256,uint128,uint256,uint256)": {
					"notice": "Emitted when liquidity is decreased for a position NFT"
				},
				"IncreaseLiquidity(uint256,uint128,uint256,uint256)": {
					"notice": "Emitted when liquidity is increased for a position NFT"
				}
			},
			"kind": "user",
			"methods": {
				"burn(uint256)": {
					"notice": "Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first."
				},
				"collect((uint256,address,uint128,uint128))": {
					"notice": "Collects up to a maximum amount of fees owed to a specific position to the recipient"
				},
				"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))": {
					"notice": "Decreases the amount of liquidity in a position and accounts it to the position"
				},
				"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))": {
					"notice": "Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`"
				},
				"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))": {
					"notice": "Creates a new position wrapped in a NFT"
				},
				"positions(uint256)": {
					"notice": "Returns the position information associated with a given token ID."
				}
			},
			"notice": "Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred and authorized.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"interfaces/INonfungiblePositionManager.sol": "INonfungiblePositionManager"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"interfaces/INonfungiblePositionManager.sol": {
			"keccak256": "0x1472f97bbd815a116416bca5680e2c4bf57b0877cdd0aa0c77411bded6a2687c",
			"license": "MIT",
			"urls": [
				"bzz-raw://072e1a5310dd384bbbbbce64e548d9970e5a31125ab105a7bea357a87ec568a9",
				"dweb:/ipfs/QmcA1g874tP74FbL6TNZy7pAU4jbEVtkcwaZvLomRQwauL"
			]
		}
	},
	"version": 1
}